 public class TwoMaxHeap {

   private int[] data;

   private int x;

   private int size;

   public TwoMaxHeap(int x) {

       this.x = x;

       this.data = new int[1];

       this.size = 0;

   }

   public void insert(int value) {
       if (size == data.length) {

           resizeArray();

       }

       data[size] = value;
       int currentIndex = size;

       while (currentIndex > 0 && data[currentIndex] > data[(currentIndex - 1) / (int) Math.pow(2, x)]) {

           int temp = data[currentIndex];

           data[currentIndex] = data[(currentIndex - 1) / (int) Math.pow(2, x)];

           data[(currentIndex - 1) / (int) Math.pow(2, x)] = temp;

           currentIndex = (currentIndex - 1) / (int) Math.pow(2, x);

       }

       size++;

   }

   public int popMax() {
       int max = data[0];
       data[0] = data[size - 1];

       size--;
       int currentIndex = 0;

       while (currentIndex < size) {

           int maxChildIndex = currentIndex;

           for (int i = 1; i <= (int) Math.pow(2, x); i++) {

               int childIndex = (int) Math.pow(2, x) * currentIndex + i;

               if (childIndex < size && data[childIndex] > data[maxChildIndex]) {

                   maxChildIndex = childIndex;

               }

           }
           if (data[currentIndex] < data[maxChildIndex]) {

               int temp = data[currentIndex];

               data[currentIndex] = data[maxChildIndex];

               data[maxChildIndex] = temp;

               currentIndex = maxChildIndex;

           } else {

               break;

           }

       }
       return max;

   }

   private void resizeArray() {

       int[] newData = new int[data.length * 2];

       for (int i = 0; i < data.length; i++) {

           newData[i] = data[i];

       }

       data = newData;

   }

}
